-------------------------------------------------------------------------------
-- @module ScriptBindings.Pokemon
-- Defines the types associated with Pokemon handles.
-- Like all other binding types, the fields of values of these types are immutable.
-- All attempts to assign any index of values of these types direct is an error.
-- [scripts.common.pokemon]

---
--@type Registerable
--The base type of things that can be registered.
--The PokemonSMS Specification will never return objects of this type.
--[scripts.common.pokemon.registerable]

---
--@function[parent=#Registerable] getName()
--Returns the resource name of the move
--@param self
--@return #string The qualified resource name of the move
--
--[scripts.common.pokemon.registerable.getName]

---
--@type Move
--@extends #Registerable
--the type of Pokemon Moves after they are loaded from the Core Libraries and registered
--
--[scripts.common.pokemon.move]

---
--@function[parent=#Move] hasTrait()
--Checks if the move has a trait named by trait
--@param self
--@param #string trait the resource name of the trait
--@return #boolean true iff the Move was created with a traited named by trait
--
--[scripts.common.pokemon.move.hasTrait]

---
--@function[parent=#Move] getType()
--Returns the type of the move, given a #Pokemon instance that knows the move.
--If self is system:moves/null, then the result is Constants.Types.TYPELESS
--@param self
--@param #Pokemon pkm the pokemon that knows this move
--@return Constants#Type the type of the move, as one of the constants defined in Constants.Types
--
--[scripts.common.pokemon.move.getType]

---
--@function[parent=#Move] getAttribute()
--Returns the attribute of the move, given a #Pokemon instance that knows the move.
--@param self
--@param #Pokemon pkm the pokemon that knows this move
--@return Constants#Attribute the attribute of the move, as one of the constants defined in Constants.Attributes
--@return unspecified if this move represents a special move or is system:moves/null.
--
--[scripts.common.pokemon.move.getAttribute]

---
--@function[parent=#Move] isCombat()
--Returns true iff given a #Pokemon instance p that knows this move
-- self:getAttribute(p)~=Constants.Attributes.STATUS is true.
--If this represents a special move or is system:moves/null, the result is unspecified.
--@param self
--@param #Pokemon pkm the pokemon
--@return #boolean true iff this move represents a combat move
--
--[scripts.common.pokemon.move.isCombat]

---
--@function[parent=#Move] getPower()
--If this move is a combat move, then returns the power of the move, given a #Pokemon instance p that knows this move.
--Otherwise returns 0
--@param self
--@param #Pokemon pkm the pokemon
--@return #number the power of the move
--
--[scripts.common.pokemon.move.getPower]

---
--@function[parent=#Move] getAccuracy()
--If self:hasTrait("pokemon:noaccuracy") then returns infinity.
--Otherwise, given a pokemon that knows this move, returns the accuracy of the move
--@param self
--@param #Pokemon pkm the pokemon
--@return #number The accuracy of the move (between 0 and 1 or Infinity)
--
--[scripts.common.pokemon.move.getAccuracy]

---
--@function[parent=#Move] hasSecondaryEffect()
--If this move is a combat move, then returns true iff the move's eventBus subscribes to Events.Battle.Combat.OnSecondaryEffect.
--Otherwise returns false
--@param self
--@return #boolean true iff this is a combat move that has a 
--
--[scripts.common.pokemon.move.hasSecondaryEffect]

---
--@function[parent=#Move] getBasePP()
--Returns the BasePP. Given that a move was assigned n as its power-point value (which is not its BasePP),
--getBasePP() returns n*5.
--If n is 0, then getBasePP returns 1
--@param self
--@return #number the base power

---
--@type MoveInstance 
--An instance of a move on a pokemon

---
--@function[parent=#MoveInstance] getMove()
--Returns the move associated with this instance
--@param self
--@return #Move the move associated with the instance

---
--@function[parent=#MoveInstance] getRemainingPP()
--Returns the ammount of PP remaining on the move.
--@param self
--@return #number the remaining pp

---
--@function[parent=#MoveInstance] getPPUps()
--Returns the number of PPUps used on this move (max 3)
--@param self
--@return #number the number of pp ups that have been used on the move

---
--@function[parent=#MoveInstance] applyEther()
--Restores the PP of the move by n, up to the maximum PP for the move.
--If n is -1 or not provided, then restores all of the PP of the move.
--@param self
--@param #number n=-1 the ammount of PP to restore (optional)
--@return #number the actual change in PP
--@return #nil if the move is already maxed out for PP

---
--@function[parent=#MoveInstance] applyPPUp()
--Increases the number of applied PPUps by n, and if this changes the value, restores the PP of the move accordingly
--If n is -1 or not provided, then after this call, self:getPPUps() will return 3, unless the move has 1 base-PP.
--If the move has 1 BasePP, then neither PP nor the number of applied PPUps will change
--@param self
--@param #number n=-1 the ammount of PP Ups to apply (optional)
--@return #number the increase in the number of applied PPUps
--@return #nil if the move already has 3 PPUps applied or has 1 BasePP.

---
--@function[parent=#MoveInstance] setMove()
--Changes the move represented by this instance.
--If the game is currently in a battle represented by the handle `b`, then this call must be ignored if b:canGainExperience() is false.
--Note that this event will not be reflected in the current battle.
--To update the move in a battle, call pkm:setMimic(slot,m). 
--If machine is provided and set to true, then the number of PPUps applied as well as the remaining PP persists to the new move.
--Otherwise, self:getPPUps() subsequently returns 0 and self:getRemainingPP() subsequently returns self:getMove():getBasePP() until an update applies.
--This function is not defined if Siding:isClient() returns false.
--The call to setMove() is an error unless move is a valid resource location that names a move other than system:moves/null
--@param self
--@param #string move the resource location that names the target move
--@param #boolean machine (optional)

---
--@type Item
--@extends Registerable
--An instance of an item, typically either held or equipped to a pokemon. (The Bag can interact with this)
--This may also be a Core item instance (the registered form of an item).
--The Core Item Instance for a given item has getSize()==0.

---
--@function[parent=#Item] getSubitem()
--Returns the subitem id of this item
--@param self
--@return #string the subitem id

---
--@function[parent=#Item] isEquipment()
--Checks if the subitem is an equipment item
--@param self
--@return #boolean

---
--@function[parent=#Item] isKey()
--Checks if the item is a key item.
--@param self
--@return #boolean

---
--@function[parent=#Item] getSize()
--Returns the size, (typically 1 if this is a held item or equipped item) or 0 if this is a core item instance. (returned by Game:getItem)
--@param self
--@return #boolean

---
--@function[parent=#Item] canEquip()
--Checks if a given pokemon can hold or equip this item.
--@param self
--@param #Pokemon pkm the pokemon that is being given the item
--@return #boolean true iff pkm is allowed to hold or equip the item

---
--@function[parent=#Item] canLose()
--Checks if a pokemon is allowed to lose an item (via thief, bestow, trick, fling, etc.) during a battle.
--This includes megastones for certain pokemon.
--Additionally checks if a pokemon is allowed to gain the item in battle.
--@param self
--@param #Pokemon pkm the pokemon that is losing (or gaining) the item
--@return #boolean true iff pkm is allowed to lose (or gain) the item in battle

---
--@function[parent=#Item] getExtra()
--Gets the extra table.
--The extra table contains item dependent string-value mappings. 
--The returned table is a copy of the extra table. It can be assigned normally, but assignments do not reflect the game state.
--Use the setExtra function to update the table. This may result in an error.
--@param self
--@return #table A copy of the item's extra table.

---
--@function[parent=#Item] setExtra()
--Sets the extra table.
--Note that values for the keys in the extra table should be clearly documented on a per-item basis.
--Setting an extra table with missing keys or malformed values for keys results in undefined behavior.
--@param self
--@param #table extra the extra table

---
--@function[parent=#Item] setSize()
--Sets the size of the stack to the parameter.
--@param self
--@param #number size

---
--@function[parent=#Item] consume()
--Consumes the item. This effectively decrements size. 
--If this causes size to become zero, the item instance is set to the Core Item Instance for `system:items/null`
--@param self
--@param #number c=1 The number of items to consume from self.

---
--@type Pokemon
--The type of a Pokemon Instance

---
--@function[parent=#Pokemon] getHPValue()
--Gets the HP the pokemon has. If there is a battle instance `b`, and `b:owns(self)` is false
-- then it is implementation-defined if this method returns a value for self.
--For any pokemon that a value is not returned from, nil is returned instead
--@param self
--@return #number the HP Value of the pokemon
--@return #nil If there is an active battle instance `b` and `b:owns(self)`, and the implementation chooses not to return a value in this case

return nil
